generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id         String       @id
  username   String       @unique
  name       String
  surname    String
  email      String?      @unique
  phone      String?      @unique
  address    String
  image      String?
  bloodType  String
  sex        UserSex
  createdAt  DateTime     @default(now())
  parentId   String
  parent     Parent       @relation(fields: [parentId], references: [id])
  classId    Int
  class      Class        @relation(fields: [classId], references: [id])
  gradeId    Int
  grade      Grade        @relation(fields: [gradeId], references: [id])
  attendance Attendance[]
  result     Result[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String?   @unique
  address   String
  image     String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String   @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id
  level    Int    @unique
  students Student[]
  classes  Class[]
}

model Class {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  capacity     Int
  lessons      Lesson[]
  supervisorId String
  supervisor   Teacher       @relation(fields: [supervisorId], references: [id])
  student      Student[]
  grade        Grade         @relation(fields: [gradeId], references: [id])
  gradeId      Int
  events       Events[]
  annoucements Annoucement[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
}

model Lesson {
  id         Int          @id @default(autoincrement())
  name       String
  day        Day
  startTime  DateTime
  endTime    DateTime
  subject    Subject      @relation(fields: [subjectId], references: [id])
  subjectId  Int
  class      Class        @relation(fields: [classId], references: [id])
  classId    Int
  teacher    Teacher      @relation(fields: [teacherId], references: [id])
  teacherId  String
  exams      Exam[]
  assigments Assigment[]
  attendance Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  result   Result[]
}

model Assigment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  result    Result[]
}

model Result {
  id          Int       @id @default(autoincrement())
  score       Int
  exam        Exam?      @relation(fields: [examId], references: [id])
  examId      Int?
  assigment   Assigment? @relation(fields: [assigmentId], references: [id])
  assigmentId Int?
  student     Student   @relation(fields: [studentId], references: [id])
  studentId   String
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
}

model Events {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  class       Class?   @relation(fields: [classId], references: [id])
  classId     Int?
}

model Annoucement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  class       Class?   @relation(fields: [classId], references: [id])
  classId     Int?
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
